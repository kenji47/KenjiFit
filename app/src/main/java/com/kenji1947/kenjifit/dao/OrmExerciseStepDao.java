package com.kenji1947.kenjifit.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kenji1947.kenjifit.dao.OrmExerciseStep;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORM_EXERCISE_STEP".
*/
public class OrmExerciseStepDao extends AbstractDao<OrmExerciseStep, Long> {

    public static final String TABLENAME = "ORM_EXERCISE_STEP";

    /**
     * Properties of entity OrmExerciseStep.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ICON_URL = new Property(1, String.class, "ICON_URL", false, "ICON__URL");
        public final static Property DESCRIPTION_ID = new Property(2, Integer.class, "DESCRIPTION_ID", false, "DESCRIPTION__ID");
        public final static Property EXERCISE_ID = new Property(3, Integer.class, "EXERCISE_ID", false, "EXERCISE__ID");
    };


    public OrmExerciseStepDao(DaoConfig config) {
        super(config);
    }
    
    public OrmExerciseStepDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORM_EXERCISE_STEP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ICON__URL\" TEXT," + // 1: ICON_URL
                "\"DESCRIPTION__ID\" INTEGER," + // 2: DESCRIPTION_ID
                "\"EXERCISE__ID\" INTEGER);"); // 3: EXERCISE_ID
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORM_EXERCISE_STEP\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrmExerciseStep entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ICON_URL = entity.getICON_URL();
        if (ICON_URL != null) {
            stmt.bindString(2, ICON_URL);
        }
 
        Integer DESCRIPTION_ID = entity.getDESCRIPTION_ID();
        if (DESCRIPTION_ID != null) {
            stmt.bindLong(3, DESCRIPTION_ID);
        }
 
        Integer EXERCISE_ID = entity.getEXERCISE_ID();
        if (EXERCISE_ID != null) {
            stmt.bindLong(4, EXERCISE_ID);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrmExerciseStep readEntity(Cursor cursor, int offset) {
        OrmExerciseStep entity = new OrmExerciseStep( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ICON_URL
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // DESCRIPTION_ID
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3) // EXERCISE_ID
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrmExerciseStep entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setICON_URL(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDESCRIPTION_ID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEXERCISE_ID(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrmExerciseStep entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrmExerciseStep entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
